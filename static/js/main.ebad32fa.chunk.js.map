{"version":3,"sources":["API/API.ts","features/Task/TaskReducer.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","App/app-reducer.ts","features/Login/Login.tsx","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodoList/todoListsReducer.ts","features/Task/Task.tsx","features/TodoList/todoList.tsx","features/TodoList/TodolistList.tsx","App/App.tsx","App/store.ts","index.tsx","features/Task/Task.module.css"],"names":["TaskPriorities","configOMB","baseURL","withCredentials","headers","TaskStatuses","axiosInstance","axios","create","API","get","title","post","todoId","delete","put","APITask","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setErrorApp","setStatusApp","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","Login","useDispatch","isLoggenIn","useSelector","state","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","res","console","log","resultCode","catch","message","finally","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","rel","target","FormGroup","TextField","label","margin","getFieldProps","onBlur","handleBlur","touched","style","color","FormControlLabel","control","Checkbox","Button","variant","AddItemForm","React","memo","props","useState","setTitle","setError","callBackAddItem","trim","addItem","onChange","e","currentTarget","onKeyDown","key","helperText","IconButton","onClick","disabled","entityStatus","AddBox","EditableSpan","editMode","setEditMode","activateEditMode","autoFocus","onChanges","blured","onDoubleClick","changeTodolistEntityStatusAC","id","Task","task","onChangTaskStatus","onDeleteHandler","className","Completed","s","is_done","checked","New","TodoList","tasks","filter","changeFilter","idTodo","stableDispatch","useCallback","useEffect","items","todolistId","addTasks","TodoListId","addTaskT","onChangesTitle","ChangeTodolistTitleAC","ChangeTodolistTitleF","onRemoveHandler","RemoveTodolistAC","filteredTodoList","t","getState","find","startDate","priority","description","deadline","todoListId","ChangeTaskStatusAC","updateTaskStatusTC","onChangesTaskTitle","ChangeTaskTitleAC","ChangeTaskTitleF","RemoveTaskAC","map","startIcon","TodolistList","todoList","todolists","padding","todolist","AddTodolistF","spacing","Paper","App","app","position","top","textAlign","width","CircularProgress","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","component","from","rootReducer","combineReducers","action","stateCopy","forEach","tl","todolistTasks","copyState","newTodolist","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ebad32fa.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { TodolistType } from \"../features/TodoList/todoListsReducer\";\r\nimport { TaskType } from \"../features/Task/TaskReducer\";\r\n\r\nconst key = \"34263072-624d-43a5-8a5f-75afa7ad4af4\";\r\nconst configOMB = {\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials:true,\r\n    headers:{\r\n        \"API-KEY\": key\r\n    }\r\n};\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\n\r\nconst axiosInstance = axios.create(configOMB);\r\n\r\nexport const API = {\r\n    getTodoList: () => {\r\n        return axiosInstance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodoList: (title:string) => {\r\n        return axiosInstance.post<ResponseType<{item:TodolistType}>>('todo-lists', {title})\r\n    },\r\n    deleteTodoList: (todoId:string) => {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updateTodoList: (todoId:string, title:string) => {\r\n        return axiosInstance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n    }\r\n\r\n}\r\n\r\nexport const APITask = {\r\n    getTask: (todoId:string) => {\r\n        return axiosInstance.get<{items: Array<TaskType>}>(`todo-lists/${todoId}/tasks`)\r\n    },\r\n    createTask: (todoId:string,title:string) => {\r\n        return axiosInstance.post<ResponseType<{item:TaskType}>>(`todo-lists/${todoId}/tasks`, {title})\r\n    },\r\n    deleteTask: (todoId:string, taskId:string) => {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n    },\r\n    updateTask: (todoId:string,taskId:string, model: UpdateTaskModelType) => {\r\n        return axiosInstance.put<ResponseType<TaskType>>(`todo-lists/${todoId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}\r\ntype LoginPostType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginPostType) {\r\n        return axiosInstance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return axiosInstance.get<ResponseType<LoginPostType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n","import {AppActionType, AppRootStateType, AppThunk} from \"../../App/store\";\r\nimport {APITask, TaskPriorities} from \"../../API/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorApp, setStatusApp} from \"../../App/app-reducer\";\r\nimport {changeTodolistEntityStatusAC} from \"../TodoList/todoListsReducer\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState: TaskStateTask = {}\r\n\r\n\r\nexport type TaskStateTask = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type TaskDomainType = TaskType & {\r\n    status: TaskStatuses\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    inProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport type RemoveTaskType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    TodoListId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n    TodoListId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\nexport const TasksReducer = (state: TaskStateTask = initialState, action: AppActionType): TaskStateTask => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        case 'REMOVE-TASK':\r\n            state[action.TodoListId] = state[action.TodoListId].filter(t => t.id !== action.taskId);\r\n            return {...state}\r\n        case 'ADD-TASK':\r\n\r\n            let todolistTasks = state[action.TodoListId];\r\n            state[action.TodoListId] = [action.task, ...todolistTasks];\r\n            return {...state}\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id !== action.taskId\r\n                        ? task\r\n                        : {...task, status: action.status})\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id !== action.taskId\r\n                        ? task\r\n                        : {...task, title: action.title})\r\n            }\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n\r\nexport const RemoveTaskAC = (taskId: string, TodoListId: string): RemoveTaskType => {\r\n    return {type: 'REMOVE-TASK', taskId, TodoListId}\r\n}\r\nexport const AddTaskAC = (task: TaskType, TodoListId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", task, TodoListId}\r\n}\r\n\r\nexport const ChangeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todoListId}\r\n}\r\nexport const ChangeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}\r\n\r\n\r\nexport const getTaskTodoT = (todoId: string): AppThunk => (dispatch) => {\r\n    dispatch(setStatusApp(\"loading\"))\r\n    APITask.getTask(todoId)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(setTasksAC(res.data.items, todoId))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTaskT = (taskId: string, TodoListId: string): AppThunk => (dispatch) => {\r\n    dispatch(setStatusApp(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(TodoListId, 'loading'))\r\n    APITask.deleteTask(TodoListId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(RemoveTaskAC(taskId, TodoListId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatusAC(TodoListId, 'failed'))\r\n        })\r\n\r\n}\r\nexport const addTaskT = (todoId: string, title: string): AppThunk => (dispatch) => {\r\n    dispatch(setStatusApp(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todoId, 'loading'))\r\n    APITask.createTask(todoId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(AddTaskAC(res.data.data.item, todoId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatusAC(todoId, 'failed'))\r\n        })\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        dispatch(setStatusApp(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        if (task) {\r\n            APITask.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                    if(res.data.resultCode === 0){\r\n                        dispatch(ChangeTaskStatusAC(taskId, status, todolistId))\r\n                        dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorApp(error.message))\r\n                })\r\n                .finally(() => {\r\n                    dispatch(setStatusApp(\"succeeded\"))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const ChangeTaskTitleF = (taskId: string, title: string, todoListId: string): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todoListId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId\r\n    })\r\n    dispatch(setStatusApp(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    if (task) {\r\n        APITask.updateTask(todoListId, taskId, {\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status\r\n        })\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(ChangeTaskTitleAC(taskId, title, todoListId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setErrorApp(error.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setStatusApp(\"succeeded\"))\r\n                dispatch(changeTodolistEntityStatusAC(todoListId, 'failed'))\r\n            })\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n","// import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../API/API';\r\nimport {SetAppErrorActionType, SetAppStatusActionType, setErrorApp, setStatusApp} from \"../App/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorApp(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorApp('Some error occurred'))\r\n    }\r\n    dispatch(setStatusApp('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setErrorApp(error.message))\r\n    dispatch(setStatusApp('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux'\r\nimport {setErrorApp, setStatusApp} from \"../../App/app-reducer\";\r\nimport {AppActionType} from \"../../App/store\";\r\nimport {authAPI} from '../../API/API';\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setStatusApp('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            console.log(res)\r\n            if(res.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setStatusApp('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setStatusApp('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type ActionsTypeAuth = ReturnType<typeof setIsLoggedInAC>","import { authAPI } from \"../API/API\"\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: null | string\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'loading',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIAL-APP':\r\n            return  {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setStatusApp = (status:RequestStatusType) => {\r\n    return ({type: 'APP/SET-STATUS', status} as const)\r\n}\r\nexport const setErrorApp = (error: null | string) => {\r\n    return({type:'APP/SET-ERROR', error} as const)\r\n}\r\nexport  const setIsInitializedAC = (value: boolean) => {\r\n    return({type:'APP/SET-INITIAL-APP', value} as const)\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setStatusApp('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(error => {\r\n        dispatch(setErrorApp(error.message))\r\n    })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setStatusApp>\r\nexport type SetAppErrorActionType = ReturnType<typeof setErrorApp>\r\nexport type SetAppInitialActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType = any","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const dispatch = useDispatch()\r\n    const isLoggenIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Password has been 6 length'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggenIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               rel=\"noopener noreferrer\"\r\n                               target={'_blank'}>here\r\n\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport { IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../App/app-reducer\";\r\n\r\n\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nconst AddItemForm = React.memo((props:AddItemFormType) => {\r\n    const [value, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onTitleKeyHandler = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !==null){\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\"){\r\n            callBackAddItem();\r\n        }\r\n\r\n    }\r\n    const callBackAddItem = () => {\r\n\r\n        if (value.trim() !== ''){\r\n            props.addItem(value);\r\n\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n        setTitle('');\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={value}\r\n                onChange={onTitleChangeHandler}\r\n                onKeyDown={onTitleKeyHandler}\r\n                error={!!error}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color='primary'\r\n                onClick={callBackAddItem}\r\n                disabled={props.entityStatus === \"loading\"}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    value:string\r\n    onChanges: (newValue:string) => void\r\n    blured: boolean\r\n\r\n}\r\n\r\nconst EditableSpan = React.memo((props:EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.value)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMetod = () => {\r\n        setEditMode(false);\r\n        props.onChanges(title);\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMetod}/>\r\n            : props.blured\r\n            ? <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n            : <h3 onDoubleClick={activateEditMode}>{props.value}</h3>\r\n    )\r\n})\r\n\r\nexport default EditableSpan;","\r\nimport {AppActionType, AppThunk} from \"../../App/store\";\r\nimport {API} from \"../../API/API\";\r\nimport {RequestStatusType, setErrorApp, setStatusApp} from \"../../App/app-reducer\";\r\nimport { handleServerAppError } from \"../../utils/error-utils\";\r\n\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed';\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type:'ADD-TODOLIST'\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title:string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type:'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter:FilterType\r\n}\r\n\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodoListDomainType>=initialState, action: AppActionType):Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'All',\r\n                entityStatus:\"idle\"\r\n            }))\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist:TodoListDomainType = {\r\n                ...action.todolist,\r\n                filter: 'All',\r\n                entityStatus:\"idle\"\r\n            }\r\n            return [...state, newTodolist]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n\r\n            return [...state.map(tl => tl.id !== action.id\r\n                ? tl\r\n                : {...tl, title: action.title})\r\n            ]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n\r\n            return [...state.map(tl => tl.id !== action.id\r\n                ? tl\r\n                : {...tl, filter: action.filter})\r\n            ]\r\n        case'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id\r\n            ? {...tl, entityStatus:action.entityStatus}\r\n            : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return { type: \"ADD-TODOLIST\",  todolist}\r\n}\r\nexport const ChangeTodolistTitleAC = ( todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", id:todolistId,  title:title}\r\n}\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): ChangeTodolistFilterActionType => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", id:todolistId,  filter:filter}\r\n}\r\nexport const changeTodolistEntityStatusAC = (id:string, entityStatus:RequestStatusType) => {\r\n    return ({\r\n        type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n        id,\r\n        entityStatus\r\n    } as const)\r\n}\r\n\r\nexport type ChangeTodolistEntityStatus = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const getTodolistT = ():AppThunk => (dispatch) => {\r\n    dispatch(setStatusApp(\"loading\"))\r\n    API.getTodoList()\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                dispatch(setTodolistsAC(res.data))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTodoListT = (todolistId: string):AppThunk => (dispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    dispatch(setStatusApp(\"loading\"))\r\n    API.deleteTodoList(todolistId)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(RemoveTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const ChangeTodolistTitleF = (todolistId: string, title: string):AppThunk => (dispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    dispatch(setStatusApp(\"loading\"))\r\n    API.updateTodoList(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(ChangeTodolistTitleAC(todolistId, title))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n        })\r\n}\r\nexport const  AddTodolistF = (title: string):AppThunk => (dispatch) => {\r\n    dispatch(setStatusApp(\"loading\"))\r\n    API.createTodoList(title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(AddTodolistAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setErrorApp(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStatusApp(\"succeeded\"))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../components/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskDomainType, TaskStatuses} from \"./TaskReducer\";\r\nimport s from './Task.module.css'\r\nimport {RequestStatusType} from \"../../App/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    onChangTaskStatus: (id:string,status: TaskStatuses) => void\r\n    onChanges: (id:string,title:string) => void\r\n    onDeleteHandler: (id:string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nconst Task = React.memo(({task:{status, title, id},onChangTaskStatus, onChanges, onDeleteHandler, entityStatus}:TaskPropsType) => {\r\n   const onChangeTitle = (value:string) => {\r\n       onChanges(id, value)\r\n   }\r\n\r\n    return (\r\n        <div  className={status === TaskStatuses.Completed ? s.is_done : ''}>\r\n            <Checkbox\r\n                color='primary'\r\n                checked={status ===TaskStatuses.Completed}\r\n                disabled={entityStatus === \"loading\"}\r\n                onChange={(e) => onChangTaskStatus(id, e.currentTarget.checked? TaskStatuses.Completed:TaskStatuses.New)}/>\r\n            <EditableSpan value={title} onChanges={onChangeTitle} blured={true} />\r\n            <IconButton\r\n                onClick={() => onDeleteHandler(id)} disabled={ entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\n\r\nimport AddItemForm from \"../../components/AddItemForm\";\r\nimport EditableSpan from \"../../components/EditableSpan\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Task from \"../Task/Task\";\r\nimport {\r\n    addTaskT, ChangeTaskTitleF,\r\n    getTaskTodoT,\r\n    removeTaskT,\r\n    TaskDomainType,\r\n    TaskStatuses,\r\n    updateTaskStatusTC\r\n} from \"../Task/TaskReducer\";\r\nimport {ChangeTodolistTitleF, FilterType, removeTodoListT} from \"./todoListsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../App/app-reducer\";\r\n\r\ntype PropsType = {\r\n    title: string;\r\n    tasks: Array<TaskDomainType>;\r\n    changeFilter: (value: FilterType, todoListId: string) => void;\r\n    filter: FilterType\r\n    idTodo: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nconst TodoList = React.memo((props: PropsType) => {\r\n\r\n    const {tasks, filter, title, changeFilter, idTodo} = props;\r\n    const dispatch = useDispatch();\r\n    const stableDispatch = useCallback(dispatch, [])\r\n\r\n    useEffect(() => {\r\n        stableDispatch(getTaskTodoT(idTodo))\r\n    }, [stableDispatch, idTodo])\r\n\r\n\r\n    const addTasks = useCallback((value: string) => {\r\n        stableDispatch(addTaskT(idTodo, value))\r\n    }, [stableDispatch, idTodo])\r\n\r\n\r\n    const onChangesTitle = useCallback((value: string) => {\r\n        stableDispatch(ChangeTodolistTitleF(idTodo, value))\r\n    }, [stableDispatch, idTodo])\r\n\r\n\r\n    const onRemoveHandler = useCallback(() => {\r\n        stableDispatch(removeTodoListT(idTodo))\r\n    }, [stableDispatch, idTodo])\r\n\r\n\r\n    let filteredTodoList = tasks;\r\n    if (filter === 'Active') {\r\n        filteredTodoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'Completed') {\r\n        filteredTodoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    const onChangTaskStatus = useCallback((id: string, status: TaskStatuses) => {\r\n        stableDispatch(updateTaskStatusTC(id, idTodo, status));\r\n    }, [stableDispatch, idTodo])\r\n\r\n    const onChangesTaskTitle = useCallback((id: string, title: string) => {\r\n        debugger\r\n        stableDispatch(ChangeTaskTitleF(id, title, idTodo))\r\n    }, [stableDispatch, idTodo])\r\n\r\n    const onDeleteHandler = useCallback((id: string) => {\r\n        stableDispatch(removeTaskT(id, idTodo))\r\n    }, [stableDispatch, idTodo])\r\n\r\n\r\n    const onChangeAllHandler = () => changeFilter('All', idTodo);\r\n    const onChangeActiveHandler = () => changeFilter('Active', idTodo);\r\n    const onChangeCompletedHandler = () => changeFilter('Completed', idTodo);\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan value={title} onChanges={onChangesTitle} blured={false}/>\r\n            <AddItemForm addItem={addTasks} entityStatus={props.entityStatus}/>\r\n            <div>\r\n                {\r\n                    filteredTodoList.map(t => {\r\n                        return (\r\n                            <Task task={t} onChangTaskStatus={onChangTaskStatus} onChanges={onChangesTaskTitle}\r\n                                  onDeleteHandler={onDeleteHandler} entityStatus ={props.entityStatus}  key={t.id}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div className={'btn_remove'}>\r\n                <Button\r\n\r\n                    variant={filter === 'All' ? 'outlined' : 'text'}\r\n                    onClick={onChangeAllHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'Active' ? 'outlined' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onChangeActiveHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    color={'secondary'}\r\n                    variant={filter === 'Completed' ? 'outlined' : 'text'}\r\n                    onClick={onChangeCompletedHandler}>Completed\r\n\r\n                </Button>\r\n            </div>\r\n            <Button\r\n                variant='contained'\r\n                color='secondary'\r\n                startIcon={<DeleteIcon/>}\r\n                disabled={props.entityStatus === \"loading\"}\r\n                onClick={onRemoveHandler}>\r\n                Remove List\r\n            </Button>\r\n        </div>\r\n    )\r\n});\r\nexport default TodoList;","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm\";\r\nimport TodoList from \"./todoList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {AddTodolistF, ChangeTodolistFilterAC, FilterType, getTodolistT, TodoListDomainType} from \"./todoListsReducer\";\r\nimport {TaskStateTask} from \"../Task/TaskReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst TodolistList = () => {\r\n    const todoList = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateTask>(state => state.tasks)\r\n    const isLoggenIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const stableDispatch = useCallback(dispatch, [])\r\n    useEffect(() =>{\r\n        if (!isLoggenIn) {\r\n            return\r\n        }\r\n        stableDispatch(getTodolistT())\r\n    }, [stableDispatch, isLoggenIn])\r\n    const changeFilter = useCallback((value: FilterType, todoListId: string) => {\r\n\r\n        stableDispatch(ChangeTodolistFilterAC(todoListId, value))\r\n\r\n    }, [stableDispatch])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const addTodoList = (title: string) => {\r\n        dispatch(AddTodolistF(title))\r\n    }\r\n    if (!isLoggenIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{\r\n                padding: '20px'\r\n            }}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoList.map(({id, title, filter, entityStatus}) => {\r\n                        return (\r\n                            <Grid item key={id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <TodoList\r\n                                        key={id}\r\n                                        idTodo={id}\r\n                                        title={title}\r\n                                        tasks={tasks[id]}\r\n                                        entityStatus={entityStatus}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodolistList;","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport TodolistList from \"../features/TodoList/TodolistList\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst App = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggenIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const stableDispatch = useCallback(dispatch, [])\r\n    useEffect(() => {\r\n        stableDispatch(initializeAppTC())\r\n    }, [stableDispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const LogOutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggenIn\r\n                        ? <Button className={'btn_app'} onClick={LogOutHandler}>Log Out</Button>\r\n                        : <NavLink to={'/login'} className={'link_app'}> login</NavLink>}\r\n\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistList/>}/>\r\n                    <Route component={Login}   path={'/login'}/>\r\n                    <Route path={'/404'}   render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {\r\n    AddTaskActionType,\r\n    ChangeTaskStatusActionType,\r\n    ChangeTaskTitleActionType,\r\n    RemoveTaskType, SetTasksActionType,\r\n    TasksReducer\r\n} from \"../features/Task/TaskReducer\";\r\nimport {\r\n    AddTodolistActionType, ChangeTodolistEntityStatus, ChangeTodolistFilterActionType,\r\n    ChangeTodolistTitleActionType,\r\n    RemoveTodolistActionType, SetTodolistsActionType,\r\n    todolistsReducer\r\n} from \"../features/TodoList/todoListsReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer, SetAppErrorActionType, SetAppInitialActionType, SetAppStatusActionType} from './app-reducer';\r\nimport { ActionsTypeAuth, authReducer } from '../features/Login/auth-reducer';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: TasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionType =\r\n    ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n    | RemoveTaskType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTasksActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatus\r\n    |SetAppInitialActionType\r\n| ActionsTypeAuth\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AppActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from \"./App/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./App/store\";\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n\r\n            <App/>\r\n\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__3rABQ\"};"],"sourceRoot":""}